@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ElVision.Data
@using ElVisionLibrary.Models.Identity;
@using ElVision.Services
@using ElVisionLibrary.Models.Utilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject IEmailSender<User> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IElOverblikService ElOverblik

<PageTitle>Register</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Register</MudText>

<MudGrid>
    <MudItem md="6">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />

            <MudText Typo="Typo.body1" GutterBottom="true">Create a new account.</MudText>

            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                        Label="Email" Placeholder="name@example.com"
                                        UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                        Label="Password" InputType="InputType.Password" Placeholder="password"
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                        Label="Confirm Password" InputType="InputType.Password" Placeholder="confirm password"
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.ElOverblikApiKey)" @bind-Value="Input.ElOverblikApiKey"
                                        Label="ElOverblik Api Key" Placeholder="Insert ElOverblik Api Key"
                                        UserAttributes="@(new() { { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Register</MudStaticButton>
                </MudItem>

            </MudGrid>
        </EditForm>
    </MudItem>
    <MudItem md="6">

        <MudText>
            <h2>Guide til oprettelse af API-adgang på ElOverblik.dk</h2>

            <b>Trin 1: Gå til ElOverblik.dk</b><br />
            • Klik på linket: <MudLink Href="https://eloverblik.dk/customer/data-sharing" Target="_blank">ElOverblik API-adgang</MudLink>.<br /><br />
            
            <b>Trin 2: Log ind med MitId</b><br />
            • Klik på <b>"Log ind"</b> øverst på siden.<br />
            • Vælg login-type.<br />
            • Log ind med dit <b>MitID</b> for at få adgang til din konto.<br /><br />

            <b>Trin 3: Opret et nyt API-token</b><br />
            • Klik på knappen <b>"Opret Token"</b>.<br />
            • Indtast et navn for dit token i det relevante felt.<br />
            • Klik på <b>"Opret"</b> for at generere dit token.<br /><br />

            <b>Trin 4: Kopier dit token</b><br />
            • Når dit token er oprettet, vil det blive vist på skærmen og være klar til at kopier.<br />
            • Opret herefter din bruger på ElVision med det kopieret token.<br /><br />

            <b>Bemærk:</b><br />
            • Dit API-token giver adgang til dine data, så del den ikke med andre.<br />
        </MudText>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);


        var operationResult = await ElOverblik.GetDataAccessTokenAsync(Input.ElOverblikApiKey);

        if (operationResult.Success)
        {
            // Encrypt the API key
            string encryptedApiKey;
            try
            {
                encryptedApiKey = APIEncryption.Encrypt(Input.ElOverblikApiKey);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error encrypting the API key.");
                NotificationService.Add(new ElVisionLibrary.Models.Utilities.NotificationModel("An error occurred while encrypting the API key.", NotificationType.Error));
                return;
            }

            user.ElOverblikApiKey = encryptedApiKey;

            var result = await UserManager.CreateAsync(user, Input.Password);

            if (!result.Succeeded)
            {
                identityErrors = result.Errors;
                return;
            }

            Logger.LogInformation("User created a new account with password.");

            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

            await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                RedirectManager.RedirectTo(
                    "Account/RegisterConfirmation",
                    new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
            }

            await SignInManager.SignInAsync(user, isPersistent: false);
            RedirectManager.RedirectTo(ReturnUrl);

        }
        else
        {
            NotificationService.Add(new ElVisionLibrary.Models.Utilities.NotificationModel("Not a valid API key, please insert a new one", NotificationType.Error));
        }



    }

    private User CreateUser()
    {
        try
        {
            return Activator.CreateInstance<User>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(User)}'. " +
                $"Ensure that '{nameof(User)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<User> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<User>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "API Key")]
        public string ElOverblikApiKey { get; set; } = "";
    }
}
